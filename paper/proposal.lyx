#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Address
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
title{CPSC 433 - Course Scheduling Problem}
\end_layout

\begin_layout Plain Layout


\backslash
author{
\end_layout

\begin_layout Plain Layout

Konrad Aust 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
and
\end_layout

\begin_layout Plain Layout

Mark Barley
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
and
\end_layout

\begin_layout Plain Layout

Kendra Wannamaker
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
and
\end_layout

\begin_layout Plain Layout

Tomas Bystersky
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
and
\end_layout

\begin_layout Plain Layout

Jordan Wallace
\backslash

\backslash

\end_layout

\begin_layout Plain Layout


\backslash
and
\end_layout

\begin_layout Plain Layout

Aaron Mouratidis
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
maketitle
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In this paper, we will present two approaches to solving the scheduling
 problem for the Computer Science Department at the University of Calgary.
 The first is a set-based search model, with a genetic approach.
 The second is an And-Tree-Based model that subdivides the schedule and
 attempts to combine subproblems to find an overall solution.
 
\end_layout

\begin_layout Section
Set Based Search
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
This is a genetic algorithms approach that begins with a set of valid, random
 solutions, and then for a number of generations uses mutate and crossover
 operations on some subset of the population to create a gradually improving
 solution.
\end_layout

\begin_layout Standard
The desirability of a given solution is given by the 
\begin_inset Formula $Eval$
\end_inset

 function.
 More desirable solutions are more likely to be crossbred.
 Whenever the population expands beyond a certain threshold, the solutions
 with the highest 
\begin_inset Formula $Eval$
\end_inset

 values are retired.
\end_layout

\begin_layout Standard
Mutations and crossovers are done in such a way that all solutions are kept
 valid.
 There will never be a solution in the population that does not satisfy
 all hard constraints.
 
\end_layout

\begin_layout Standard
The algorithm terminates after a number of generations determined at runtime.
 After simulating the generations, the final solution is the member of the
 population with the lowest 
\begin_inset Formula $Eval$
\end_inset

 value.
\end_layout

\begin_layout Subsection
Search Model
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbb{A}=(S,T)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f\in F\iff f=(a_{1},...,a_{n})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
a_{i}\in Slots
\]

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $a_{i}$
\end_inset

 in 
\begin_inset Formula $f$
\end_inset

 means that some course or lab with index 
\begin_inset Formula $i$
\end_inset

 is assigned slot 
\begin_inset Formula $a_{i}\in Slots$
\end_inset

.
 (
\begin_inset Formula $1\leq i\leq n)$
\end_inset

.
\end_layout

\begin_layout Standard
Our courses and labs are indexed based on some arbitrary ordering of the
 elements in the set 
\begin_inset Formula $Courses\cup Labs$
\end_inset

.
 The ordering itself does not matter, so long as we have a unique index
 for every course and lab.
 There should be 
\begin_inset Formula $n$
\end_inset

 such indices, where 
\begin_inset Formula $n=|Courses\cup Labs|$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
S\subseteq2^{F}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
T=\{(s,s^{\prime})|\exists(A\rightarrow B)\in Ext,\,s^{\prime}=(s-A)\cup B\}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Ext=\{A\rightarrow B|A,B\subseteq F,\,\left(Mutate(A,B)\lor Crossover(A,B)\lor Plague(A,B)\right)\}
\]

\end_inset


\end_layout

\begin_layout Standard
(Function definitions for Mutate, Crossover, and Plague are given at the
 end of this section.)
\end_layout

\begin_layout Subsection
Search Process
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbb{P}=(\mathbb{A},Env,\mathbb{K})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbb{K}(s,e)=(s-A)\cup B
\]

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula 
\[
A\rightarrow B\in Ext
\]

\end_inset


\end_layout

\begin_layout Standard
And:
\end_layout

\begin_layout Itemize
If 
\begin_inset Formula $|s|\geq threshold$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Where 
\begin_inset Formula $threshold$
\end_inset

 is the maximum population size we allow.
\end_layout

\begin_layout Itemize
\begin_inset Formula $A$
\end_inset

 = The least valuable 40% of facts.
\end_layout

\begin_layout Itemize
\begin_inset Formula $Plague(A,B)$
\end_inset

 holds.
\end_layout

\end_deeper
\begin_layout Itemize
Else, randomly select between one of the two following conditions with equal
 probability:
\end_layout

\begin_layout Itemize
Condition 1: Mutate
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $A=\{k_{1}\}$
\end_inset

 Where 
\begin_inset Formula $k_{1}$
\end_inset

 is a randomly selected member of 
\begin_inset Formula $s$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $Mutate(A,B)$
\end_inset

 holds.
\end_layout

\end_deeper
\begin_layout Itemize
Condition 2: Crossover
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $A=\{k_{1},k_{2}\}$
\end_inset

 Where
\end_layout

\begin_layout Itemize
\begin_inset Formula $k_{1}$
\end_inset

 = The member of 
\begin_inset Formula $s$
\end_inset

 with the lowest 
\begin_inset Formula $Eval$
\end_inset

 value.
\end_layout

\begin_layout Itemize
\begin_inset Formula $k_{2}$
\end_inset

 Is a member of 
\begin_inset Formula $s$
\end_inset

 randomly selected according to the following distribution:
\end_layout

\begin_layout Itemize
\begin_inset Formula 
\[
p_{j}=\frac{1}{Eval(s{}_{j})\cdot fitSum}\,\forall s_{j}\in s-\{k_{1}\}
\]

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula 
\[
\mbox{where }fitSum=\sum_{h=1}^{N}\frac{1}{Eval(s_{h})},\ N=|s-\{k_{1}\}|
\]

\end_inset


\end_layout

\begin_layout Itemize
Where 
\begin_inset Formula $p_{j}$
\end_inset

 is the probability that 
\begin_inset Formula $s_{j}$
\end_inset

 is selected.
 This is fitness proportionate selection, meaning solutions with a better
 
\begin_inset Formula $Eval$
\end_inset

 value are more likely to be selected.
 The sum of all such probabilities is 
\begin_inset Formula $1$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $Crossover(A,B)$
\end_inset

 holds.
\end_layout

\end_deeper
\begin_layout Standard
We only discard the worst members of the population when necessary, and
 we ensure that the fittest member is always able to pass on his traits
 through crossovers, while selecting the other crossover parent randomly
 with a bias towards fitter individuals.
 To ensure diversity, we add random mutations.
\end_layout

\begin_layout Standard
This search control should build on the most successful solutions while
 introducing enough randomness to maintain diversity.
 That's the plan, anyways.
\end_layout

\begin_layout Subsection
Search Instance
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Ins=(s_{0},G)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
s_{0}=\{s_{0_{1}},s_{0_{2}},...,s_{0_{q}}\}
\]

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $s_{0_{i}}=RandomSol()$
\end_inset

 for 
\begin_inset Formula $1\leq i\leq q$
\end_inset

, where 
\begin_inset Formula $q$
\end_inset

 is the number of elements in our starting population.
 This number can be decided at runtime.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
G(s)=\begin{cases}
true & \mbox{If this is the final generation}\\
false & \mbox{Otherwise}
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
In other words, we decide ahead of time for how many generations our search
 will run.
 Once we have reached our final generation, we quit the search.
 Our solution will be the member of 
\begin_inset Formula $s$
\end_inset

 with the lowest 
\begin_inset Formula $Eval$
\end_inset

 value.
\end_layout

\begin_layout Subsection
Relation Definitions
\end_layout

\begin_layout Subsubsection
RandomSol
\end_layout

\begin_layout Standard
RandomSol is an or-tree-based search that finds a random valid class assignment.
 It is used to build our initial population of facts at the beginning.
 It selects transitions randomly, prioritizing the ones at the deepest levels
 of the tree to find solutions more quickly.
\end_layout

\begin_layout Standard
If we fail to find a solution, we do not need to run the set based search,
 as this means that there is no valid solution.
 
\end_layout

\begin_layout Subsubsection*
Or-Tree-Based Search Model
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbb{A}=(S,T)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $S\mbox{ and \ensuremath{T}}$
\end_inset

are no more specific than the general definition given for Or-Tree-Based
 search.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
pr\in Prob\iff pr=(a_{1},...,a_{n})
\]

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $a_{i}\in(Slots\cup\{\$\})$
\end_inset

.
 
\begin_inset Formula $a_{i}$
\end_inset

 represents the slot assignment for the course or lab with index 
\begin_inset Formula $i$
\end_inset

.
 An assignment of 
\begin_inset Formula $\$$
\end_inset

 indicates that no assignment has been made thusfar.
\end_layout

\begin_layout Standard
As in the Set Based Search, our courses and labs are indexed based on some
 arbitrary ordering of the elements in the set 
\begin_inset Formula $Courses\cup Labs$
\end_inset

.
 The ordering itself does not matter, so long as we have a unique index
 for every course and lab.
 There should be 
\begin_inset Formula $n$
\end_inset

 such indices, where 
\begin_inset Formula $n=|Courses\cup Labs|$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Altern(pr,pr_{1},...,pr_{M})
\]

\end_inset

 Holds where:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
pr=(a_{1},...,a_{i},...,a_{n})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $a_{i}$
\end_inset

 is the first element in this vector with a value of 
\begin_inset Formula $\$$
\end_inset

.
\end_layout

\begin_layout Standard
For each 
\begin_inset Formula $s_{j}\in Slots$
\end_inset

, we create a 
\begin_inset Formula $pr_{j}$
\end_inset

 such that:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
pr_{j}=(a_{1},...,a_{i}^{\prime},...,a_{n})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
a_{i}^{\prime}=s_{j}
\]

\end_inset


\end_layout

\begin_layout Subsubsection*
Or-Tree-Based Search Process
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbb{P}=(\mathbb{A},Env,\mathbb{K})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbb{K}(s,e)=s^{\prime}
\]

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $\forall x\in S$
\end_inset

, 
\begin_inset Formula $f_{leaf}(x)\geq f_{leaf}(s^{\prime})$
\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $s^{\prime}$
\end_inset

is uniformly randomly selected among all nodes with the highest depth.
\end_layout

\begin_layout Standard
Traversing the nodes in a random order should in theory lead us to a random
 solution.
\end_layout

\begin_layout Subsubsection*
Or-Tree-Based Search Instance
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Ins=(s_{0},G)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
s_{0}=partassign
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $G(s)$
\end_inset

 is no more specific than the general definition.
 Our criteria for when a solution is solved is the following:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
sol=\begin{cases}
yes & \forall x\in pr,\;x_{i}\neq\$,\;Constr(pr)=true\\
no & \forall x\in pr,\;x_{i}\neq\$,\;Constr(pr)=false\\
? & otherwise
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Mutate
\end_layout

\begin_layout Standard
A mutation takes a single individual, and messes with a number of their
 course assignments, randomly switching them around.
 The purpose of this is to introduce randomness to preserve diversity.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Mutate(A,B)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
A\subseteq F,\;B\subseteq F
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
A=\{f\},\;B=\{f,f^{\prime}\}
\]

\end_inset


\end_layout

\begin_layout Enumerate
Start with 
\begin_inset Formula $f^{\prime}=f=(a_{1},...,a_{N})$
\end_inset


\end_layout

\begin_layout Enumerate
Repeat the following a number of times:
\end_layout

\begin_deeper
\begin_layout Enumerate
Pick a uniformly random 
\begin_inset Formula $a_{i}$
\end_inset

 from 
\begin_inset Formula $f^{\prime}$
\end_inset


\end_layout

\begin_layout Enumerate
Set 
\begin_inset Formula $a_{i}$
\end_inset

 to some randomly selected 
\begin_inset Formula $s\in Slots-\{a_{i}\}$
\end_inset

, where 
\begin_inset Formula $Constr(f^{\prime})=true$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
The number of switches in a mutation is constant and decided ahead of time.
 
\end_layout

\begin_layout Subsubsection
Crossover
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Crossover(A,B)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
A=\{M,F|M,F\in F,M\neq F\}\;B=\{M,F,C\}
\]

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $M,F,$
\end_inset

 and 
\begin_inset Formula $C$
\end_inset

 are the Mother, the Father, and the Child of the crossover operation, respectiv
ely.
 
\begin_inset Formula $C$
\end_inset

 is created by merging traits of 
\begin_inset Formula $M$
\end_inset

 and 
\begin_inset Formula $F$
\end_inset

 using an or-tree-based search.
 
\end_layout

\begin_layout Subsubsection*
Or-Tree-Based Search Model
\end_layout

\begin_layout Standard
This search model is identical to that of RandomSol()
\end_layout

\begin_layout Subsubsection*
Or-Tree-Based Search Process
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbb{P}=(\mathbb{A},Env,\mathbb{K})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\mathbb{K}(s,e)=s^{\prime}
\]

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $s^{\prime}$
\end_inset

satisfies
\end_layout

\begin_layout Itemize
\begin_inset Formula $\forall x\in s$
\end_inset

, 
\begin_inset Formula $f_{leaf}(x)\geq f_{leaf}(s^{\prime})$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $s^{\prime}$
\end_inset

is otherwise selected uniformly randomly.
\end_layout

\begin_layout Standard
We define 
\begin_inset Formula $f_{leaf}(r)$
\end_inset

 as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f_{leaf}(r)=\begin{cases}
1 & r\in M\;\land\;r\in F\\
2 & r\in M\;\lor\;r\in F\\
3 & otherwise
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Subsubsection*
Or-Tree-Based Search Instance
\end_layout

\begin_layout Standard
This search instance is identical to that of RandomSol() 
\end_layout

\begin_layout Subsubsection
Plague
\end_layout

\begin_layout Standard
Plague is very simple.
 It takes a set of facts, and removes them.
 We use this function to trim our population, preventing it from getting
 too large.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Plague(A,B)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
A\subseteq F
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
B=\{\}
\]

\end_inset


\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
Let's consider a simple scenario where:
\end_layout

\begin_layout Itemize
\begin_inset Formula $Slots=\{s_{1},s_{2},s_{3}\}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $Courses=\{c_{1},c_{2}\}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $Labs=\{l_{11},l_{21}\}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $not-compatible=\{(c_{1},l_{11}),(c_{2},l_{21})\}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $unwanted=\{(c_{1},s_{3})\}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $partassign=(\$,\$,\$,\$)$
\end_inset


\end_layout

\begin_layout Standard
Let us index our courses and labs in the following order: 
\begin_inset Formula $(c_{1},c_{2},l_{11},l_{21})$
\end_inset

.
\end_layout

\begin_layout Standard
In the interest of keeping this section brief, we will not specify values
 such as
\begin_inset Formula $pen\_coursemin$
\end_inset

, or 
\begin_inset Formula $Preference$
\end_inset

, and will simply give the 
\begin_inset Formula $Eval$
\end_inset

 values of each fact.
 The operations that happens are as follows:
\end_layout

\begin_layout Subsubsection*
1.
 Generate a Random Population of Solutions
\end_layout

\begin_layout Standard
We use RandomSol() to generate the following facts:
\end_layout

\begin_layout Itemize
\begin_inset Formula $f_{1}=(s_{1},s_{2},s_{3,}s_{3}),\;Eval(f_{1})=7$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $f_{2}=(s_{2},s_{3},s_{1,}s_{1}),\;Eval(f_{2})=10$
\end_inset


\end_layout

\begin_layout Subsubsection*
2.
 Mutate a Randomly Selected Fact
\end_layout

\begin_layout Standard
We choose 
\begin_inset Formula $f_{2}$
\end_inset

 randomly.
 After applying the mutation operator, the result is the addition of 
\begin_inset Formula $f_{3}$
\end_inset

:
\end_layout

\begin_layout Itemize
\begin_inset Formula $f_{3}=(s_{2},s_{2},s_{1},s_{1}),\;Eval(f_{3})=5$
\end_inset


\end_layout

\begin_layout Subsubsection*
3.
 Crossover of Two facts
\end_layout

\begin_layout Standard
The next operation is a crossover.
 We pick 
\begin_inset Formula $f_{3}$
\end_inset

because it has the lowest 
\begin_inset Formula $Eval$
\end_inset

 value, and we randomly select 
\begin_inset Formula $f_{1}$
\end_inset

 to be the other parent.
 This results in the addition of the newly born 
\begin_inset Formula $f_{4}$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $f_{4}=(s_{2},s_{2},s_{3},s_{3}),\;Eval(f_{4})=3$
\end_inset


\end_layout

\begin_layout Subsubsection*
4.
 Trimming of the Population
\end_layout

\begin_layout Standard
We now have too many facts in our population! We kill off the worst one.
 In this case, that is 
\begin_inset Formula $f_{2}$
\end_inset

, since it has the highest 
\begin_inset Formula $Eval$
\end_inset

 value.
 Our population is now:
\end_layout

\begin_layout Standard
\begin_inset Formula $s=\{f_{1},f_{3},f_{4}\}$
\end_inset


\end_layout

\begin_layout Subsubsection*
5.
 Finished with Generations
\end_layout

\begin_layout Standard
We only ran three generations in this example, but you should probably run
 more.
 Now that we are finished, we return the solution with the lowest 
\begin_inset Formula $Eval$
\end_inset

 value in our population.
 That value is 
\begin_inset Formula $f_{4}$
\end_inset

.
\end_layout

\begin_layout Itemize
Solution = 
\begin_inset Formula $f_{4}=(s_{2},s_{2},s_{3},s_{3})$
\end_inset


\end_layout

\begin_layout Standard
And we are done!
\end_layout

\begin_layout Section
And-Tree-Based Search
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
This is an And-Tree-Based approach that begins by inserting one course or
 lab at a time into every possibe slot.
 Each of those newly created leaf nodes is evaluated to determine which
 we should choose next.
 We first prioritize moving branches to a goal state.
 Our second priority depends if we have previously found a valid solution.
 If we have not found a valid solution we will do a depth first search,
 otherwise we will do a breadth first search.
 Our goals states include 
\begin_inset Quotes eld
\end_inset

violating our constraints
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

complete assignment of all course and labs
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

the leaf evaluates to less than our current best solution
\begin_inset Quotes erd
\end_inset

.
 
\end_layout

\begin_layout Standard
In order to trim the size of the tree we use the 
\begin_inset Formula $Eval$
\end_inset

 function which evaluates the current leaf based on an analysis of the violation
s of the soft constraints.
 Once a leaf is reached where the 
\begin_inset Formula $Eval$
\end_inset

 function evaluates to a worse value than the current best solution, the
 leaf is moved to a 
\begin_inset Formula $Yes$
\end_inset

 state.
 If a complete solution has been found, and has an 
\begin_inset Formula $Eval$
\end_inset

 value better than the current best solution, the we update it with our
 current leaf solution.
\end_layout

\begin_layout Standard
When all branches of the tree end in a 
\begin_inset Formula $Yes$
\end_inset

 state leaf, the best solution has been found and is returned.
 
\end_layout

\begin_layout Subsection
Search Model
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
A=(S,T)
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
pr\in Prob\iff pr=(X_{1},...,X_{n})
\]

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $X_{i}\in(Slots\cup\{\$\})$
\end_inset

.
 
\begin_inset Formula $X_{i}$
\end_inset

 represents the slot assignment for the course or lab with index 
\begin_inset Formula $i$
\end_inset

.
 An assignment of 
\begin_inset Formula $\$$
\end_inset

 indicates that no assignment has been made thusfar.
\end_layout

\begin_layout Standard
As in the Set Based Search, our courses and labs are indexed based on some
 arbitrary ordering of the elements in the set 
\begin_inset Formula $Courses\cup Labs$
\end_inset

.
 The ordering itself does not matter, so long as we have a unique index
 for every course and lab.
 There should be 
\begin_inset Formula $n$
\end_inset

 such indices, where 
\begin_inset Formula $n=|Courses\cup Labs|$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Div(pr,pr_{1},...,pr_{M})
\]

\end_inset


\end_layout

\begin_layout Standard
holds if:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
pr=(X_{1},....X_{p}....X_{n})
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $X_{p}$
\end_inset

is the first instance of 
\begin_inset Formula $\$$
\end_inset

 in 
\begin_inset Formula $pr$
\end_inset

 and for each 
\begin_inset Formula $s_{j}\in Slots$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
X_{p}^{\prime}=s_{j}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
pr_{j}=(X_{1},...,X_{p}^{\prime},...,X_{n})
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
S\subseteq Atree
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
T=\{(k,k')|k,k'\in S\ Erw(k,k')\ or\ Erw*(k',k)\}
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $Atree$
\end_inset

 is defined recursively by:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
(pr,sol)\text{\in}Atree
\]

\end_inset


\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
for
\begin_inset Formula 
\[
pr\text{\in}Prob,sol\in{yes,?}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
(pr,sol,b_{1},\text{…},b_{M})\text{\in}Atree
\]

\end_inset


\end_layout

\begin_layout Standard
for
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
pr\in Prob
\]

\end_inset


\begin_inset Formula 
\[
sol\in\{yes,?\}
\]

\end_inset


\begin_inset Formula 
\[
b_{1},...,b_{n}\in Atree
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset


\begin_inset Formula $pr$
\end_inset

 is solved
\begin_inset Quotes erd
\end_inset


\begin_inset Formula $\iff pr$
\end_inset

=
\begin_inset Formula $(X_{1},...,X_{n})$
\end_inset


\end_layout

\begin_layout Standard
when
\begin_inset Formula 
\[
X_{k}\neq\$\;\mbox{for \ensuremath{1\leq k\leq n}}
\]

\end_inset

 or when
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Eval(pr)<Eval(w)
\]

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $w=min[Eval(pr_{i})]$
\end_inset

 where 
\begin_inset Formula $pr=(X_{1},$
\end_inset


\begin_inset Formula $...,X_{n})$
\end_inset

 and 
\begin_inset Formula $X_{n}$
\end_inset


\begin_inset Formula $\neq\$$
\end_inset

 and 
\begin_inset Formula $Constr(pr)=true\mbox{ }$
\end_inset


\end_layout

\begin_layout Standard
i.e.
 
\begin_inset Formula $w=$
\end_inset

the current best solution
\end_layout

\begin_layout Standard
or 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Constr(pr)=false
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $Erw$
\end_inset

 is no more specific than the general definition for And-tree search.
\end_layout

\begin_layout Subsection
Search Control
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
f_{leaf}=\begin{cases}
choose\ deepest & w=null\\
choose\ shallowest & otherwise
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $f_{trans}$
\end_inset

expands 
\begin_inset Formula $pr$
\end_inset

 based on the 
\begin_inset Formula $Div$
\end_inset

 relations to produce 
\begin_inset Formula $pr_{1}$
\end_inset

 to 
\begin_inset Formula $pr_{n}$
\end_inset

 as children of 
\begin_inset Formula $pr$
\end_inset

.
\end_layout

\begin_layout Standard
As above, 
\begin_inset Formula $w$
\end_inset

 is our current best solution.
 It is the leaf node with 
\begin_inset Formula $sol=yes$
\end_inset

 which satisfies 
\begin_inset Formula $Constr$
\end_inset

 and has the lowest 
\begin_inset Formula $Eval$
\end_inset

 value out of any we have traversed so far.
\end_layout

\begin_layout Standard
In other words, we expand nodes deeper down the tree until we have found
 a valid solution.
 We then switch to a breadth-first method of traversing the tree.
\end_layout

\begin_layout Subsection
Search Instance
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
Ins=(s_{0},G)
\]

\end_inset


\end_layout

\begin_layout Standard
If the given problem to solve is pr, then we have
\end_layout

\begin_layout Standard
\begin_inset Formula $s_{0}=(pr,?)$
\end_inset

, where 
\begin_inset Formula $pr=partassign$
\end_inset

.
\end_layout

\begin_layout Standard
And 
\begin_inset Formula $G(s)=yes$
\end_inset

 if and only if:
\end_layout

\begin_layout Itemize
\begin_inset Formula $s=(pr\prime,yes)$
\end_inset

 or
\end_layout

\begin_layout Itemize
\begin_inset Formula $s=(pr\prime,?,b_{1},...,b_{M}),G(b_{1})=...=G(b_{M})=yes$
\end_inset

 and the solutions to 
\begin_inset Formula $b_{1},...,b_{M}$
\end_inset

 are compatible with each other or there is no transition that has not been
 tried out already.
\end_layout

\begin_layout Subsection
Example
\end_layout

\begin_layout Standard
Let's consider a simple scenario where:
\end_layout

\begin_layout Itemize
\begin_inset Formula $Slots=\{s_{1},s_{2}\}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $Courses=\{c_{1},c_{2},c_{3}\}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $Labs=\{l_{11},l_{21}\}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $unwanted=\{(c_{2},s_{2})\}$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $partassign=(\$,\$,\$,\$,\$)$
\end_inset


\end_layout

\begin_layout Standard
Let us index our courses and labs in the following order:
\end_layout

\begin_layout Standard
\begin_inset Formula $(c_{1},c_{2},c_{3},l_{11},l_{21})$
\end_inset


\begin_inset Newline newline
\end_inset

We end up with the following search tree:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename and_search_instance.JPG
	display false
	scale 15

\end_inset


\end_layout

\end_body
\end_document
